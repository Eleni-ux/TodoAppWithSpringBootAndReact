{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar ReactDom = _interopDefault(require('react-dom'));\n\nvar cx = _interopDefault(require('classnames'));\n\nvar noScroll = _interopDefault(require('no-scroll'));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CloseIcon = function CloseIcon(_ref) {\n  var classes = _ref.classes,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      id = _ref.id,\n      closeIcon = _ref.closeIcon,\n      onClickCloseIcon = _ref.onClickCloseIcon;\n  return React__default.createElement(\"button\", {\n    id: id,\n    className: cx(classes.closeButton, classNames === null || classNames === void 0 ? void 0 : classNames.closeButton),\n    style: styles === null || styles === void 0 ? void 0 : styles.closeButton,\n    onClick: onClickCloseIcon,\n    \"data-testid\": \"close-button\"\n  }, closeIcon ? closeIcon : React__default.createElement(\"svg\", {\n    className: classNames === null || classNames === void 0 ? void 0 : classNames.closeIcon,\n    style: styles === null || styles === void 0 ? void 0 : styles.closeIcon,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 36 36\",\n    \"data-testid\": \"close-icon\"\n  }, React__default.createElement(\"path\", {\n    d: \"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\"\n  })));\n};\n\nvar _modals = [];\n/**\r\n * Handle the order of the modals.\r\n * Inspired by the material-ui implementation.\r\n */\n\nvar modalManager = {\n  /**\r\n   * Return the modals array\r\n   */\n  modals: function modals() {\n    return _modals;\n  },\n\n  /**\r\n   * Register a new modal\r\n   */\n  add: function add(newModal, blockScroll) {\n    if (_modals.findIndex(function (modal) {\n      return modal.element === newModal;\n    }) === -1) {\n      _modals.push({\n        element: newModal,\n        blockScroll: blockScroll\n      });\n    }\n  },\n\n  /**\r\n   * Remove a modal\r\n   */\n  remove: function remove(oldModal) {\n    var index = _modals.findIndex(function (modal) {\n      return modal.element === oldModal;\n    });\n\n    if (index !== -1) {\n      _modals.splice(index, 1);\n    }\n  },\n\n  /**\r\n   * Check if the modal is the first one on the screen\r\n   */\n  isTopModal: function isTopModal(modal) {\n    var _modals2;\n\n    return !!_modals.length && ((_modals2 = _modals[_modals.length - 1]) === null || _modals2 === void 0 ? void 0 : _modals2.element) === modal;\n  }\n};\nvar isBrowser = typeof window !== 'undefined';\n\nvar blockNoScroll = function blockNoScroll() {\n  noScroll.on();\n};\n\nvar unblockNoScroll = function unblockNoScroll() {\n  // Restore the scroll only if there is no modal on the screen\n  // We filter the modals that are not affecting the scroll\n  var modals = modalManager.modals().filter(function (modal) {\n    return modal.blockScroll;\n  });\n\n  if (modals.length === 0) {\n    noScroll.off();\n  }\n}; // https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.0.9\n\n\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'];\n\nfunction isHidden(node) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return node.offsetParent === null || getComputedStyle(node).visibility === 'hidden';\n}\n\nfunction getAllTabbingElements(parentElem) {\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n\n    if (!node.disabled && getTabindex(node) > -1 && !isHidden(node)) {\n      onlyTabbable.push(node);\n    }\n  }\n\n  return onlyTabbable;\n}\n\nfunction tabTrappingKey(event, parentElem) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && \"development\" === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n  if (!isNaN(tabindexAttr)) return tabindexAttr; // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node) {\n  return node.getAttribute('contentEditable');\n}\n\nvar FocusTrap = function FocusTrap(_ref) {\n  var container = _ref.container;\n  var refLastFocus = React.useRef();\n  /**\r\n   * Handle focus lock on the modal\r\n   */\n\n  React.useEffect(function () {\n    var handleKeyEvent = function handleKeyEvent(event) {\n      if (container === null || container === void 0 ? void 0 : container.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    } // On mount we focus on the first focusable element in the modal if there is one\n\n\n    if (isBrowser && (container === null || container === void 0 ? void 0 : container.current)) {\n      var allTabbingElements = getAllTabbingElements(container.current);\n\n      if (allTabbingElements[0]) {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (candidateSelectors.findIndex(function (selector) {\n          var _document$activeEleme;\n\n          return (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.matches(selector);\n        }) !== -1) {\n          refLastFocus.current = document.activeElement;\n        }\n\n        allTabbingElements[0].focus();\n      }\n    }\n\n    return function () {\n      if (isBrowser) {\n        var _refLastFocus$current;\n\n        document.removeEventListener('keydown', handleKeyEvent); // On unmount we restore the focus to the last focused element\n\n        (_refLastFocus$current = refLastFocus.current) === null || _refLastFocus$current === void 0 ? void 0 : _refLastFocus$current.focus();\n      }\n    };\n  }, [container]);\n  return null;\n};\n\nvar classes = {\n  overlay: 'react-responsive-modal-overlay',\n  modal: 'react-responsive-modal-modal',\n  modalCenter: 'react-responsive-modal-modalCenter',\n  closeButton: 'react-responsive-modal-closeButton',\n  animationIn: 'react-responsive-modal-fadeIn',\n  animationOut: 'react-responsive-modal-fadeOut'\n};\n\nvar Modal = function Modal(_ref) {\n  var _classNames$animation, _classNames$animation2;\n\n  var open = _ref.open,\n      center = _ref.center,\n      _ref$blockScroll = _ref.blockScroll,\n      blockScroll = _ref$blockScroll === void 0 ? true : _ref$blockScroll,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      container = _ref.container,\n      _ref$showCloseIcon = _ref.showCloseIcon,\n      showCloseIcon = _ref$showCloseIcon === void 0 ? true : _ref$showCloseIcon,\n      closeIconId = _ref.closeIconId,\n      closeIcon = _ref.closeIcon,\n      _ref$focusTrapped = _ref.focusTrapped,\n      focusTrapped = _ref$focusTrapped === void 0 ? true : _ref$focusTrapped,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 500 : _ref$animationDuratio,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? 'dialog' : _ref$role,\n      ariaDescribedby = _ref.ariaDescribedby,\n      ariaLabelledby = _ref.ariaLabelledby,\n      modalId = _ref.modalId,\n      onClose = _ref.onClose,\n      onEscKeyDown = _ref.onEscKeyDown,\n      onOverlayClick = _ref.onOverlayClick,\n      onAnimationEnd = _ref.onAnimationEnd,\n      children = _ref.children;\n  var refModal = React.useRef(null);\n  var refShouldClose = React.useRef(null);\n  var refContainer = React.useRef(null); // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  }\n\n  var _useState = React.useState(open),\n      showPortal = _useState[0],\n      setShowPortal = _useState[1];\n\n  var handleOpen = function handleOpen() {\n    modalManager.add(refContainer.current, blockScroll);\n\n    if (blockScroll) {\n      blockNoScroll();\n    }\n\n    if (refContainer.current && !container && !document.body.contains(refContainer.current)) {\n      document.body.appendChild(refContainer.current);\n    }\n\n    document.addEventListener('keydown', handleKeydown);\n  };\n\n  var handleClose = function handleClose() {\n    modalManager.remove(refContainer.current);\n\n    if (blockScroll) {\n      unblockNoScroll();\n    }\n\n    if (refContainer.current && !container && document.body.contains(refContainer.current)) {\n      document.body.removeChild(refContainer.current);\n    }\n\n    document.removeEventListener('keydown', handleKeydown);\n  };\n\n  var handleKeydown = function handleKeydown(event) {\n    // Only the last modal need to be escaped when pressing the esc key\n    if (event.keyCode !== 27 || !modalManager.isTopModal(refContainer.current)) {\n      return;\n    }\n\n    if (onEscKeyDown) {\n      onEscKeyDown(event);\n    }\n\n    if (closeOnEsc) {\n      onClose();\n    }\n  };\n\n  React.useEffect(function () {\n    // When the modal is rendered first time we want to block the scroll\n    if (open) {\n      handleOpen();\n    }\n\n    return function () {\n      // When the component is unmounted directly we want to unblock the scroll\n      if (showPortal) {\n        handleClose();\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    // If the open prop is changing, we need to open the modal\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  var handleClickOverlay = function handleClickOverlay(event) {\n    if (refShouldClose.current === null) {\n      refShouldClose.current = true;\n    }\n\n    if (!refShouldClose.current) {\n      refShouldClose.current = null;\n      return;\n    }\n\n    if (onOverlayClick) {\n      onOverlayClick(event);\n    }\n\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n\n    refShouldClose.current = null;\n  };\n\n  var handleModalEvent = function handleModalEvent() {\n    refShouldClose.current = false;\n  };\n\n  var handleClickCloseIcon = function handleClickCloseIcon() {\n    onClose();\n  };\n\n  var handleAnimationEnd = function handleAnimationEnd() {\n    if (!open) {\n      setShowPortal(false);\n      handleClose();\n    }\n\n    if (blockScroll) {\n      unblockNoScroll();\n    }\n\n    if (onAnimationEnd) {\n      onAnimationEnd();\n    }\n  };\n\n  return showPortal ? ReactDom.createPortal(React__default.createElement(\"div\", {\n    style: _extends({\n      animation: (open ? (_classNames$animation = classNames === null || classNames === void 0 ? void 0 : classNames.animationIn) !== null && _classNames$animation !== void 0 ? _classNames$animation : classes.animationIn : (_classNames$animation2 = classNames === null || classNames === void 0 ? void 0 : classNames.animationOut) !== null && _classNames$animation2 !== void 0 ? _classNames$animation2 : classes.animationOut) + \" \" + animationDuration + \"ms\"\n    }, styles === null || styles === void 0 ? void 0 : styles.overlay),\n    className: cx(classes.overlay, classNames === null || classNames === void 0 ? void 0 : classNames.overlay),\n    onClick: handleClickOverlay,\n    onAnimationEnd: handleAnimationEnd,\n    \"data-testid\": \"overlay\"\n  }, React__default.createElement(\"div\", {\n    ref: refModal,\n    className: cx(classes.modal, center && classes.modalCenter, classNames === null || classNames === void 0 ? void 0 : classNames.modal),\n    style: styles === null || styles === void 0 ? void 0 : styles.modal,\n    onMouseDown: handleModalEvent,\n    onMouseUp: handleModalEvent,\n    onClick: handleModalEvent,\n    id: modalId,\n    role: role,\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"data-testid\": \"modal\"\n  }, focusTrapped && React__default.createElement(FocusTrap, {\n    container: refModal\n  }), children, showCloseIcon && React__default.createElement(CloseIcon, {\n    classes: classes,\n    classNames: classNames,\n    styles: styles,\n    closeIcon: closeIcon,\n    onClickCloseIcon: handleClickCloseIcon,\n    id: closeIconId\n  }))), container || refContainer.current) : null;\n};\n\nexports.Modal = Modal;\nexports.default = Modal;","map":{"version":3,"sources":["../src/CloseIcon.tsx","../src/modalManager.ts","../src/utils.ts","../src/focusTrapJs.ts","../src/FocusTrap.tsx","../src/index.tsx"],"names":["CloseIcon","classes","classNames","styles","id","closeIcon","onClickCloseIcon","className","cx","style","closeButton","onClick","xmlns","width","height","viewBox","d","modals","add","modal","element","blockScroll","remove","index","isTopModal","isBrowser","blockNoScroll","noScroll","unblockNoScroll","candidateSelectors","node","getComputedStyle","getAllTabbingElements","parentElem","tabbableNodes","onlyTabbable","i","getTabindex","isHidden","tabTrappingKey","event","process","console","allTabbingElements","firstFocusableElement","lastFocusableElement","tabindexAttr","parseInt","isNaN","isContentEditable","FocusTrap","container","refLastFocus","useRef","useEffect","handleKeyEvent","document","overlay","modalCenter","animationIn","animationOut","Modal","open","center","closeOnEsc","closeOnOverlayClick","showCloseIcon","closeIconId","focusTrapped","animationDuration","role","ariaDescribedby","ariaLabelledby","modalId","onClose","onEscKeyDown","onOverlayClick","onAnimationEnd","children","refModal","refShouldClose","refContainer","showPortal","setShowPortal","useState","handleOpen","modalManager","handleClose","handleKeydown","handleClickOverlay","handleModalEvent","handleClickCloseIcon","handleAnimationEnd","animation","ref","onMouseDown","onMouseUp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\ninterface CloseIconProps {\n  id?: string;\n  closeIcon?: React.ReactNode;\n  styles?: {\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  classNames?: {\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  classes: {\n    closeButton?: string;\n  };\n  onClickCloseIcon: () => void;\n}\n\nconst CloseIcon = ({\n  classes,\n  classNames,\n  styles,\n  id,\n  closeIcon,\n  onClickCloseIcon,\n}: CloseIconProps) => (\n  <button\n    id={id}\n    className={cx(classes.closeButton, classNames?.closeButton)}\n    style={styles?.closeButton}\n    onClick={onClickCloseIcon}\n    data-testid=\"close-button\"\n  >\n    {closeIcon ? (\n      closeIcon\n    ) : (\n      <svg\n        className={classNames?.closeIcon}\n        style={styles?.closeIcon}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={28}\n        height={28}\n        viewBox=\"0 0 36 36\"\n        data-testid=\"close-icon\"\n      >\n        <path d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\" />\n      </svg>\n    )}\n  </button>\n);\n\nexport default CloseIcon;\n","const modals: { element: HTMLDivElement; blockScroll: boolean }[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport default {\n  /**\n   * Return the modals array\n   */\n  modals: () => modals,\n\n  /**\n   * Register a new modal\n   */\n  add: (newModal: HTMLDivElement, blockScroll: boolean) => {\n    if (modals.findIndex((modal) => modal.element === newModal) === -1) {\n      modals.push({ element: newModal, blockScroll });\n    }\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: HTMLDivElement) => {\n    const index = modals.findIndex((modal) => modal.element === oldModal);\n    if (index !== -1) {\n      modals.splice(index, 1);\n    }\n  },\n\n  /**\n   * Check if the modal is the first one on the screen\n   */\n  isTopModal: (modal: HTMLDivElement) =>\n    !!modals.length && modals[modals.length - 1]?.element === modal,\n};\n","import noScroll from 'no-scroll';\nimport modalManager from './modalManager';\n\nexport const isBrowser = typeof window !== 'undefined';\n\nexport const blockNoScroll = () => {\n  noScroll.on();\n};\n\nexport const unblockNoScroll = () => {\n  // Restore the scroll only if there is no modal on the screen\n  // We filter the modals that are not affecting the scroll\n  const modals = modalManager.modals().filter((modal) => modal.blockScroll);\n  if (modals.length === 0) {\n    noScroll.off();\n  }\n};\n","// https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.0.9\n\nexport const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction isHidden(node: any) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return (\n    node.offsetParent === null || getComputedStyle(node).visibility === 'hidden'\n  );\n}\n\nexport function getAllTabbingElements(parentElem: any) {\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n    if (!node.disabled && getTabindex(node) > -1 && !isHidden(node)) {\n      onlyTabbable.push(node);\n    }\n  }\n  return onlyTabbable;\n}\n\nexport function tabTrappingKey(event: any, parentElem: any) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTabindex(node: any) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node: any) {\n  return node.getAttribute('contentEditable');\n}\n","import { useEffect, useRef } from 'react';\nimport { isBrowser } from './utils';\nimport {\n  tabTrappingKey,\n  candidateSelectors,\n  getAllTabbingElements,\n} from './focusTrapJs';\n\ninterface FocusTrapProps {\n  container?: React.RefObject<HTMLElement> | null;\n}\n\nexport const FocusTrap = ({ container }: FocusTrapProps) => {\n  const refLastFocus = useRef<HTMLElement | null>();\n  /**\n   * Handle focus lock on the modal\n   */\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      if (container?.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    }\n    // On mount we focus on the first focusable element in the modal if there is one\n    if (isBrowser && container?.current) {\n      const allTabbingElements = getAllTabbingElements(container.current);\n      if (allTabbingElements[0]) {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (\n          candidateSelectors.findIndex((selector) =>\n            document.activeElement?.matches(selector)\n          ) !== -1\n        ) {\n          refLastFocus.current = document.activeElement as HTMLElement;\n        }\n        allTabbingElements[0].focus();\n      }\n    }\n    return () => {\n      if (isBrowser) {\n        document.removeEventListener('keydown', handleKeyEvent);\n        // On unmount we restore the focus to the last focused element\n        refLastFocus.current?.focus();\n      }\n    };\n  }, [container]);\n\n  return null;\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport CloseIcon from './CloseIcon';\nimport { FocusTrap } from './FocusTrap';\nimport modalManager from './modalManager';\nimport { isBrowser, blockNoScroll, unblockNoScroll } from './utils';\n\nconst classes = {\n  overlay: 'react-responsive-modal-overlay',\n  modal: 'react-responsive-modal-modal',\n  modalCenter: 'react-responsive-modal-modalCenter',\n  closeButton: 'react-responsive-modal-closeButton',\n  animationIn: 'react-responsive-modal-fadeIn',\n  animationOut: 'react-responsive-modal-fadeOut',\n};\n\ninterface ModalProps {\n  /**\n   * Control if the modal is open or not.\n   */\n  open: boolean;\n  /**\n   * Should the dialog be centered.\n   *\n   * Default to false.\n   */\n  center?: boolean;\n  /**\n   * Is the modal closable when user press esc key.\n   *\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Is the modal closable when user click on overlay.\n   *\n   * Default to true.\n   */\n  closeOnOverlayClick?: boolean;\n  /**\n   * Whether to block scrolling when dialog is open.\n   *\n   * Default to true.\n   */\n  blockScroll?: boolean;\n  /**\n   * Show the close icon.\n   */\n  showCloseIcon?: boolean;\n  /**\n   * id attribute for the close icon button.\n   */\n  closeIconId?: string;\n  /**\n   * Custom icon to render (svg, img, etc...).\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * When the modal is open, trap focus within it.\n   *\n   * Default to true.\n   */\n  focusTrapped?: boolean;\n  /**\n   * You can specify a container prop which should be of type `Element`.\n   * The portal will be rendered inside that element.\n   * The default behavior will create a div node and render it at the at the end of document.body.\n   */\n  container?: Element;\n  /**\n   * An object containing classNames to style the modal.\n   */\n  classNames?: {\n    overlay?: string;\n    modal?: string;\n    closeButton?: string;\n    closeIcon?: string;\n    animationIn?: string;\n    animationOut?: string;\n  };\n  /**\n   * An object containing the styles objects to style the modal.\n   */\n  styles?: {\n    overlay?: React.CSSProperties;\n    modal?: React.CSSProperties;\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  /**\n   * Animation duration in milliseconds.\n   *\n   * Default to 500.\n   */\n  animationDuration?: number;\n  /**\n   * ARIA role for modal\n   *\n   * Default to 'dialog'.\n   */\n  role?: string;\n  /**\n   * ARIA label for modal\n   */\n  ariaLabelledby?: string;\n  /**\n   * ARIA description for modal\n   */\n  ariaDescribedby?: string;\n  /**\n   * id attribute for modal\n   */\n  modalId?: string;\n  /**\n   * Callback fired when the Modal is requested to be closed by a click on the overlay or when user press esc key.\n   */\n  onClose: () => void;\n  /**\n   * Callback fired when the escape key is pressed.\n   */\n  onEscKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void;\n  /**\n   * Callback fired when the Modal has exited and the animation is finished.\n   */\n  onAnimationEnd?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal = ({\n  open,\n  center,\n  blockScroll = true,\n  closeOnEsc = true,\n  closeOnOverlayClick = true,\n  container,\n  showCloseIcon = true,\n  closeIconId,\n  closeIcon,\n  focusTrapped = true,\n  animationDuration = 500,\n  classNames,\n  styles,\n  role = 'dialog',\n  ariaDescribedby,\n  ariaLabelledby,\n  modalId,\n  onClose,\n  onEscKeyDown,\n  onOverlayClick,\n  onAnimationEnd,\n  children,\n}: ModalProps) => {\n  const refModal = useRef<HTMLDivElement>(null);\n  const refShouldClose = useRef<boolean | null>(null);\n  const refContainer = useRef<HTMLDivElement | null>(null);\n  // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  }\n\n  const [showPortal, setShowPortal] = useState(open);\n\n  const handleOpen = () => {\n    modalManager.add(refContainer.current!, blockScroll);\n    if (blockScroll) {\n      blockNoScroll();\n    }\n    if (\n      refContainer.current &&\n      !container &&\n      !document.body.contains(refContainer.current)\n    ) {\n      document.body.appendChild(refContainer.current);\n    }\n    document.addEventListener('keydown', handleKeydown);\n  };\n\n  const handleClose = () => {\n    modalManager.remove(refContainer.current!);\n    if (blockScroll) {\n      unblockNoScroll();\n    }\n    if (\n      refContainer.current &&\n      !container &&\n      document.body.contains(refContainer.current)\n    ) {\n      document.body.removeChild(refContainer.current);\n    }\n    document.removeEventListener('keydown', handleKeydown);\n  };\n\n  const handleKeydown = (event: KeyboardEvent) => {\n    // Only the last modal need to be escaped when pressing the esc key\n    if (\n      event.keyCode !== 27 ||\n      !modalManager.isTopModal(refContainer.current!)\n    ) {\n      return;\n    }\n\n    if (onEscKeyDown) {\n      onEscKeyDown(event);\n    }\n\n    if (closeOnEsc) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    // When the modal is rendered first time we want to block the scroll\n    if (open) {\n      handleOpen();\n    }\n    return () => {\n      // When the component is unmounted directly we want to unblock the scroll\n      if (showPortal) {\n        handleClose();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    // If the open prop is changing, we need to open the modal\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  const handleClickOverlay = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    if (refShouldClose.current === null) {\n      refShouldClose.current = true;\n    }\n\n    if (!refShouldClose.current) {\n      refShouldClose.current = null;\n      return;\n    }\n\n    if (onOverlayClick) {\n      onOverlayClick(event);\n    }\n\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n\n    refShouldClose.current = null;\n  };\n\n  const handleModalEvent = () => {\n    refShouldClose.current = false;\n  };\n\n  const handleClickCloseIcon = () => {\n    onClose();\n  };\n\n  const handleAnimationEnd = () => {\n    if (!open) {\n      setShowPortal(false);\n      handleClose();\n    }\n\n    if (blockScroll) {\n      unblockNoScroll();\n    }\n\n    if (onAnimationEnd) {\n      onAnimationEnd();\n    }\n  };\n\n  return showPortal\n    ? ReactDom.createPortal(\n        <div\n          style={{\n            animation: `${\n              open\n                ? classNames?.animationIn ?? classes.animationIn\n                : classNames?.animationOut ?? classes.animationOut\n            } ${animationDuration}ms`,\n            ...styles?.overlay,\n          }}\n          className={cx(classes.overlay, classNames?.overlay)}\n          onClick={handleClickOverlay}\n          onAnimationEnd={handleAnimationEnd}\n          data-testid=\"overlay\"\n        >\n          <div\n            ref={refModal}\n            className={cx(\n              classes.modal,\n              center && classes.modalCenter,\n              classNames?.modal\n            )}\n            style={styles?.modal}\n            onMouseDown={handleModalEvent}\n            onMouseUp={handleModalEvent}\n            onClick={handleModalEvent}\n            id={modalId}\n            role={role}\n            aria-modal=\"true\"\n            aria-labelledby={ariaLabelledby}\n            aria-describedby={ariaDescribedby}\n            data-testid=\"modal\"\n          >\n            {focusTrapped && <FocusTrap container={refModal} />}\n            {children}\n            {showCloseIcon && (\n              <CloseIcon\n                classes={classes}\n                classNames={classNames}\n                styles={styles}\n                closeIcon={closeIcon}\n                onClickCloseIcon={handleClickCloseIcon}\n                id={closeIconId}\n              />\n            )}\n          </div>\n        </div>,\n        container || refContainer.current!\n      )\n    : null;\n};\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"script"}